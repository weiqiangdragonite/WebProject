


在controller目录内的每个文件，我们都称为控制器（controller）。每个控制器，相对来说就是多个
相关程序的集合，而每个控制器内部的每一个function，都是一个动作（action），而这些动作（程序），
都是相关性比较紧密的。比如说在用户登录注册的程序里面，可能会有一个叫user.php的控制器，
而里面可能有：

 function register()  用户注册程序
 function login() 用户登录程序
 function findpassword() 找回密码程序等等

这些动作（程序）都是与user.php（用户程序）是非常紧密相关的，所以我们放到同一个控制器里面。

而访问这些程序，可以使用index.php?c=user&a=login的形式来访问。c对应了控制器的名称，而a是
对应了动作的名称。也就是如果需要访问user控制器内的findpassword动作，就是
index.php?c=user&a=findpassword。


--------------------------------------------------------------------------------

MVC

和访问者交互的是控制层（Controller层），控制器（controller）是同类交互的集合，每一个交互的
操作，都对应了一个动作（action）。在sp框架中，全部的控制器类都必须继承于spController。 

对数据库进行存取的是模型层（Model层），在sp框架中，全部的模型器类都必须继承于spModel。 

显示页面模板的是视图层（View层），在sp框架中，视图层被集成到了控制器内，所以在实际开发中，
视图层所要制作的只有页面模板。 

--------------------------------------------------------------------------------

sp框架中的MVC理念，是将网络系统划分为三个关注点：交互、数据、页面模板；也就是我们设计或分析
一个网络系统，就可以从这三个角度去进行： 

交互： 
表现在系统提供了哪些功能，这些功能可以划分为哪些大类，每一个大类的功能分别都有些什么操作等等。
比如PHP论坛系统，我们可以粗略划分成板块、帖子、用户、站内信息、后台管理等几大类的功能，然后
用户的功能里面又包括了注册、登录、修改用户信息等等的多个操作。

数据： 
表现在系统对数据库进行了那些操作。网络系统几乎都需要和数据库打交道。那么，在进行对交互的分析和
对系统本身的分析后，我们也大致上可以归纳系统需要哪些数据了。然后我们将这些数据整理归类，最终
可以得出系统需要的数据表是哪些。 
就刚才的PHP论坛，按照“板块、帖子、用户、站内信息、后台管理”这五个分类功能，我们可以基本归纳出
它们需要：板块记录表、帖子记录表、用户表、站内信息表、后台设置表等等。 

页面模板： 
每一个网络系统的开发中，我们都将需要制作相当数量的页面。简单来说，控制器的每一个动作（action）
都有可能产生一个页面，所以在理清所有交互，完成控制器的设计后（未写代码前），我们就可以得到
需要的页面模板的清单了。然后在模板引擎的帮助下，页面模板的制作可以与控制器的开发同时进行，
以提高开发效率。 
按照上面的PHP论坛交互的设计，那么我们可以得到的页面模板有许多，比如板块方面，有首页模板、
分区模板、板块模板等；帖子方面有帖子内容模板、发帖模板、回帖模板等。

--------------------------------------------------------------------------------





















